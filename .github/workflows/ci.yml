name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce test matrix size while maintaining good coverage
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python setup_dev.py || (pip install python-dateutil colorama pytest pytest-cov black flake8 mypy isort && pip install . || pip install -e . || true)
        
    - name: Lint with flake8
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics || true
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics || true
        
    - name: Check code formatting with black
      run: |
        black --check src tests 2>&1 && echo "✅ Code formatting is correct" || echo "⚠️ Code formatting issues found - run 'black src tests' to fix"
      continue-on-error: true
        
    - name: Check imports with isort
      run: |
        isort --check-only src tests 2>&1 && echo "✅ Import sorting is correct" || echo "⚠️ Import sorting issues found - run 'isort src tests' to fix"
      continue-on-error: true
        
    - name: Type checking with mypy
      run: |
        mypy src --ignore-missing-imports || echo "Type checking completed with warnings"
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        
    - name: Test with pytest
      run: |
        pytest tests/ --cov=src/loggrep --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: ${{ github.workspace }}/src
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: loggrep-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  performance:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e . || pip install .
        
    - name: Performance benchmarks
      run: |
        # Create large test file
        python -c "
        import datetime
        for i in range(100000):
            print(f'{datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")} Test line {i}')
        " > large_test.log
        
        # Time the search
        time loggrep "Test line 50000" --file large_test.log
        
    - name: Memory usage test  
      run: |
        # Test memory usage with large file
        python -c "
        import psutil, subprocess, os
        proc = subprocess.Popen(['loggrep', 'test', '--file', 'large_test.log'])
        process = psutil.Process(proc.pid)
        max_memory = 0
        while proc.poll() is None:
            try:
                memory = process.memory_info().rss / 1024 / 1024  # MB
                max_memory = max(max_memory, memory)
            except:
                break
        proc.wait()
        print(f'Max memory usage: {max_memory:.1f} MB')
        assert max_memory < 500, f'Memory usage too high: {max_memory} MB'
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security check
      run: |
        pip install bandit
        bandit -r src/

  build:
    runs-on: ubuntu-latest
    needs: [test, performance, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  publish:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: build
    environment: release
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}